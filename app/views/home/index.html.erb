<h1>Home</h1>
<p>Find me in app/views/home/index.html.erb</p>
<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="home-tab" data-bs-toggle="tab"
    data-bs-target="#home-tab-pane" type="button" role="tab"
    aria-controls="home-tab-pane" aria-selected="true">Home</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="profile-tab" data-bs-toggle="tab"
    data-bs-target="#profile-tab-pane" type="button" role="tab"
    aria-controls="profile-tab-pane" aria-selected="false">Lists</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="contact-tab" data-bs-toggle="tab"
    data-bs-target="#contact-tab-pane" type="button" role="tab"
    aria-controls="contact-tab-pane" aria-selected="false">Articles</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="disabled-tab" data-bs-toggle="tab"
    data-bs-target="#disabled-tab-pane" type="button" role="tab"
    aria-controls="disabled-tab-pane" aria-selected="false">Posts</button>
  </li>
</ul>
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="home-tab-pane"
  role="tabpanel" aria-labelledby="home-tab" tabindex="0">
  <p style="padding:20px">This is some placeholder content the Home tab's associated content.
  Clicking another tab will toggle the visibility of this one for the next.
  The tab JavaScript swaps classes to control the content visibility and styling.
  You can use it with tabs, pills, and any other .nav-powered navigation.
  </p>
  </div>
  <div class="tab-pane fade" id="profile-tab-pane" role="tabpanel"
  aria-labelledby="profile-tab" tabindex="0">
  <p style="padding:20px">To help fit your needs, this works with `ul`-based markup, as shown above,
  or with any arbitrary “roll your own” markup.
  <%= link_to 'Listes', listes_path, class: "nav-link" %>
  Note that if you’re using `nav`, you shouldn’t add role="tablist" directly to it,
  as this would override the element’s native role as a navigation landmark.
  Instead, switch to an alternative element (in the example below,
  a simple `div`) and wrap the `nav` around it.
  </p>
  </div>
  <div class="tab-pane fade" id="contact-tab-pane" role="tabpanel"
  aria-labelledby="contact-tab" tabindex="0">
  <p style="padding:20px">
    And with vertical pills. Ideally, for vertical tabs,
    you should also add aria-orientation="vertical" to the tab list container.
    <%= link_to 'Articles', articles_path, class: "nav-link" %>
    Change the style of .navs component
    with modifiers and utilities.
    Mix and match as needed, or build your own.
  </p>
  </div>
  <div class="tab-pane fade" id="disabled-tab-pane" role="tabpanel"
  aria-labelledby="disabled-tab" tabindex="0">
  <p style="padding:20px">
    Dynamic tabbed interfaces, as described in the ARIA Authoring Practices Guide tabs pattern,
    require role="tablist", role="tab", role="tabpanel",
    and additional aria- attributes in order to convey their structure, functionality,
    and current state to users of assistive technologies (such as screen readers).
    As a best practice, we recommend using `button` elements for the tabs,
    as these are controls that trigger a dynamic change,
    rather than links that navigate to a new page or location.
    <%= link_to 'Posts', posts_path, class: "nav-link" %>
    In line with the ARIA Authoring Practices pattern,
    only the currently active tab receives keyboard focus.
    When the JavaScript plugin is initialized, it will set tabindex="-1"
    on all inactive tab controls. Once the currently active tab has focus,
    the cursor keys activate the previous/next tab,
    with the plugin changing the roving tabindex accordingly.
    However, note that the JavaScript plugin does not distinguish between horizontal
    and vertical tab lists when it comes to cursor key interactions:
    regardless of the tab list’s orientation,
    both the up and left cursor go to the previous tab,
    and down and right cursor go to the next tab.
  </p>
  </div>
</div>
<hr />
<div class="d-flex align-items-start">
  <div class="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
    <button class="nav-link active" id="v-pills-home-tab" data-bs-toggle="pill" data-bs-target="#v-pills-home" type="button" role="tab" aria-controls="v-pills-home" aria-selected="true">Home</button>
    <button class="nav-link" id="v-pills-profile-tab" data-bs-toggle="pill" data-bs-target="#v-pills-profile" type="button" role="tab" aria-controls="v-pills-profile" aria-selected="false">Lists</button>
    <button class="nav-link" id="v-pills-disabled-tab" data-bs-toggle="pill" data-bs-target="#v-pills-disabled" type="button" role="tab" aria-controls="v-pills-disabled" aria-selected="false">Articles</button>
    <button class="nav-link" id="v-pills-messages-tab" data-bs-toggle="pill" data-bs-target="#v-pills-messages" type="button" role="tab" aria-controls="v-pills-messages" aria-selected="false">Posts</button>
    <button class="nav-link" id="v-pills-settings-tab" data-bs-toggle="pill" data-bs-target="#v-pills-settings" type="button" role="tab" aria-controls="v-pills-settings" aria-selected="false">Movies</button>
  </div>
  <div class="tab-content" id="v-pills-tabContent">
    <div class="tab-pane fade show active" id="v-pills-home" role="tabpanel"
    aria-labelledby="v-pills-home-tab" tabindex="0">
      <p style="margin:10px">
        This is some placeholder content the Home tab's associated content.
      Clicking another tab will toggle the visibility of this one for the next.
      The tab JavaScript swaps classes to control the content visibility and styling.
      You can use it with tabs, pills, and any other .nav-powered navigation.
      </p>
    </div>
    <div class="tab-pane fade" id="v-pills-profile" role="tabpanel"
    aria-labelledby="v-pills-profile-tab" tabindex="0">
      <p style="margin:10px">This is some placeholder content the Home tab's associated content.
      Dynamic tabbed interfaces, as described in the ARIA Authoring Practices Guide tabs pattern,
      require role="tablist", role="tab", role="tabpanel",
      and additional aria- attributes in order to convey their structure,
      functionality, and current state to users of assistive technologies
      (such as screen readers).
      <%= link_to 'Listes', listes_path, class: "nav-link" %>
      As a best practice,
      we recommend using `button` elements for the tabs,
      as these are controls that trigger a dynamic change,
      rather than links that navigate to a new page or location.
      </p>
    </div>
    <div class="tab-pane fade" id="v-pills-disabled" role="tabpanel"
    aria-labelledby="v-pills-tab" tabindex="0">
      <p style="margin:10px">
        This is some placeholder content
        the Home tab's associated content.
        <%= link_to 'Articles', articles_path, class: "nav-link" %>
        Takes the basic nav from above and adds the .nav-tabs
        class to generate a tabbed interface.
        Use them to create tabbable regions with our tab JavaScript plugin.
        If you need responsive nav variations,
        consider using a series of flexbox utilities.
        While more verbose, these utilities offer greater
        customization across responsive breakpoints.
        In the example below, our nav will be stacked on the lowest breakpoint,
        then adapt to a horizontal layout that fills
        the available width starting from the small breakpoint.
      </p>
    </div>
    <div class="tab-pane fade" id="v-pills-messages" role="tabpanel"
    aria-labelledby="v-pills-messages-tab" tabindex="0">
      <p style="padding:10px">
        In line with the ARIA Authoring Practices pattern,
        only the currently active tab receives keyboard focus.
        When the JavaScript plugin is initialized,
        it will set tabindex="-1" on all inactive tab controls.
        <%= link_to 'Posts', posts_path, class: "nav-link" %>
        Once the currently active tab has focus,
        the cursor keys activate the previous/next tab,
        with the plugin changing the roving tabindex accordingly.
        However, note that the JavaScript plugin does not distinguish
        between horizontal and vertical tab lists when it
        comes to cursor key interactions: regardless of
        the tab list’s orientation, both the up and left cursor go to
        the previous tab, and down and right cursor go to the next tab.
      </p>
    </div>
    <div class="tab-pane fade" id="v-pills-settings" role="tabpanel"
    aria-labelledby="v-pills-settings-tab" tabindex="0">
      <p style="padding:10px">This is some placeholder content
        the Home tab's associated content.
        In general, to facilitate keyboard navigation,
        it’s recommended to make the tab panels themselves focusable as well,
        unless the first element containing meaningful content
        inside the tab panel is already focusable.
        <%= link_to 'Movies', movies_path, class: "nav-link" %>
        The JavaScript plugin does not try to handle this aspect—where appropriate,
        you’ll need to explicitly make your tab panels focusable
        by adding tabindex="0" in your markup.
      </p>
  </div>
  </div>
</div>
<hr />
<ul class="nav flex-column">
  <li class="nav-item">
    <a class="nav-link active" aria-current="page" href="#">List</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link 1disabled">Disabled</a>
  </li>
</ul>
<hr />
<nav class="nav flex-column">
  <a class="nav-link active" aria-current="page" href="#">Active</a>
  <a class="nav-link" href="#">Link</a>
  <a class="nav-link" href="#">Link</a>
  <a class="nav-link">Disabled</a>
</nav>
<hr />
<ul class="nav nav-tabs">
  <li class="nav-item">
    <a class="nav-link active" aria-current="page" href="#">Active</a>
  </li>
  <li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">Dropdown</a>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#">Action</a></li>
      <li><a class="dropdown-item" href="#">Another action</a></li>
      <li><a class="dropdown-item" href="#">Something else here</a></li>
      <li><hr class="dropdown-divider"></li>
      <li><a class="dropdown-item" href="#">Separated link</a></li>
    </ul>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link disabled">Disabled</a>
  </li>
</ul>
<hr />
